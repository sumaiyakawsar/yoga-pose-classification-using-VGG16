{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"collapsed_sections":["HPmPWQFeW6T-"],"provenance":[],"gpuType":"T4"},"accelerator":"GPU","kaggle":{"accelerator":"none","dataSources":[{"sourceId":1559111,"sourceType":"datasetVersion","datasetId":920599}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Step 1: Import Libraries","metadata":{"_uuid":"d3db7ede-04c9-4a08-b121-60a1bc750800","_cell_guid":"aa601be1-3e32-4d41-bc5e-7f6efb6c52f3","trusted":true,"collapsed":false,"id":"SiODyt2aXFpN","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Import Data Science Libraries\nimport numpy as np\nimport tensorflow as tf\nimport os\nimport warnings\n\n# Import visualization libraries\nimport matplotlib.pyplot as plt\n\n# # Tensorflow Libraries\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator as IDG\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.utils import plot_model\n# # Callbacks\nfrom keras.callbacks import Callback, ReduceLROnPlateau\n# # LR Scheduler\nfrom keras.optimizers import Adam\nfrom PIL import Image, ImageFile\n\n# %matplotlib inline\nwarnings.filterwarnings('ignore')\nImageFile.LOAD_TRUNCATED_IMAGES = True","metadata":{"_uuid":"70d559f8-5f05-4d27-97a8-a80cfbfd5cd7","_cell_guid":"9b522c7f-daa8-43fd-a849-c39625c3eb73","trusted":true,"collapsed":false,"id":"13ZKvdzRXF-C","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:08:07.201983Z","iopub.execute_input":"2024-12-04T16:08:07.202409Z","iopub.status.idle":"2024-12-04T16:08:07.287486Z","shell.execute_reply.started":"2024-12-04T16:08:07.202372Z","shell.execute_reply":"2024-12-04T16:08:07.286149Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# Step Bonus: Functions to Reuse","metadata":{"_uuid":"a45dc7bf-66af-45a5-93e1-916ba439b336","_cell_guid":"8dfda528-9b23-4af1-bbc0-82d1eb5c6a78","trusted":true,"collapsed":false,"id":"rFZBVmx7fBfI","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"def image_path(image_name):\n  \"\"\"\n    Returns the full path of an image given its name.\n\n    Parameters:\n    image_name (str): The name of the image file.\n\n    Returns:\n    str: The full path of the image, obtained by joining the 'images_dir' with the 'image_name'.\n\n    Example:\n    If images_dir = '/path/to/images/' and image_name = 'example.jpg', the function will return '/path/to/images/example.jpg'.\n  \"\"\"\n  return os.path.join(images_dir,image_name)","metadata":{"_uuid":"59178373-51e7-48ed-b196-b6e3bce8bfd2","_cell_guid":"590d91be-6959-45a9-9906-907550c32f9e","trusted":true,"collapsed":false,"id":"kPpXZW04evap","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:09:15.306507Z","iopub.execute_input":"2024-12-04T16:09:15.306939Z","iopub.status.idle":"2024-12-04T16:09:15.312928Z","shell.execute_reply.started":"2024-12-04T16:09:15.306904Z","shell.execute_reply":"2024-12-04T16:09:15.311645Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def model_path(model_name):\n  \"\"\"\n    Returns the path of the model with the specified model name.\n\n    Parameters:\n    model_name (str): The name of the model for which the path is to be generated.\n\n    Returns:\n    str: The complete path of the model, obtained by joining the 'model_dir' and 'model_name'.\n\n    Explanation:\n    This function takes a model name as input and returns the complete path of the model by joining it with the 'model_dir' variable. The 'model_dir' variable should be defined before calling this function.\n\n    Example:\n    If model_dir is '/path/to/models' and model_name is 'my_model', the function will return '/path/to/models/my_model'.\n  \"\"\"\n  return os.path.join(model_dir,model_name)","metadata":{"_uuid":"e72ce55d-7008-4d5c-870b-943686750112","_cell_guid":"d6233a3e-d511-4876-8807-a44c3e0370f3","trusted":true,"collapsed":false,"id":"4zAc0TxRXeT4","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:09:21.570651Z","iopub.execute_input":"2024-12-04T16:09:21.571142Z","iopub.status.idle":"2024-12-04T16:09:21.576957Z","shell.execute_reply.started":"2024-12-04T16:09:21.571104Z","shell.execute_reply":"2024-12-04T16:09:21.575618Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def plot_metric(history):\n\n  \"\"\"\n  Returns separate loss curves for training and validation metrics.\n\n  Args:\n    history: A TensorFlow model History object that contains the training history.\n\n  The function generates two plots: one for the training and validation accuracy and the other for the training and validation loss. It uses the data from the provided 'history' object to plot these curves. The 'history' object is expected to have the following keys: 'accuracy', 'val_accuracy', 'loss', and 'val_loss', which are used to extract the corresponding data for plotting.\n\n  The function saves the generated plots as images using the provided 'title' as the file name with the '.png' extension. The images are saved in the current working directory. Additionally, the function displays the generated plots using the matplotlib library.\n\n  Example:\n  history = model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10)\n  plot_metric(history, \"training_metrics\")\n  \"\"\"\n  train_accuracy = history.history['accuracy']\n  val_accuracy = history.history['val_accuracy']\n  train_loss = history.history['loss']\n  val_loss = history.history['val_loss']\n  epochs = range(1, len(train_accuracy) + 1)\n\n  # Plot accuracy\n  plt.plot(epochs, train_accuracy, label='training_accuracy')\n  plt.plot(epochs, val_accuracy, label='val_accuracy')\n  plt.title('Training and validation accuracy')\n  plt.xlabel('Epochs')\n  plt.legend()\n  # plt.savefig(image_path(\"Training and validation accuracy.png\"))\n\n  # Plot loss\n  plt.figure()\n  plt.plot(epochs, train_loss,label='training_loss')\n  plt.plot(epochs, val_loss, label='val_loss')\n  plt.title('Training and validation loss')\n  plt.xlabel('Epochs')\n  plt.legend([\"train_loss\", 'val_loss'])\n\n  #Save image\n  # plt.savefig(image_path(\"Training and validation loss.png\"))\n  plt.show()","metadata":{"_uuid":"d129e503-0d32-439c-8da3-fd329eb41d72","_cell_guid":"4e01ed40-fe9e-4a70-9146-753068d5fc2d","trusted":true,"collapsed":false,"id":"qiFUr1k7rXTF","jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Step 2: Data Preprocessing","metadata":{"_uuid":"db41ac2f-ed7d-48ee-96e5-d76f94d15f44","_cell_guid":"034584d0-599e-4e9b-92bf-25004413321e","trusted":true,"collapsed":false,"id":"GDQJ3ExZtClT","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Setting the path to the training directory that contains the data for yoga asanas\ntrain_dir = '/kaggle/input/yoga-poses-dataset/DATASET/TRAIN'\n\n# Setting the path to the test directory that contains the data for yoga asanas\ntest_dir = '/kaggle/input/yoga-poses-dataset/DATASET/TEST'\n\n# Setting the path to the directory containing images for the assignment\nimages_dir = '/kaggle/working/Images'\n\n# Setting the path to the directory where the trained models will be saved\nmodel_dir = '/kaggle/working/Models'","metadata":{"_uuid":"66ab397f-d5d7-4f46-aea2-350968c13ab8","_cell_guid":"c5e08630-9b60-4d67-8a98-0c2e0826e267","trusted":true,"collapsed":false,"id":"mNdBNhBCjIUa","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:09:45.464415Z","iopub.execute_input":"2024-12-04T16:09:45.464793Z","iopub.status.idle":"2024-12-04T16:09:45.469933Z","shell.execute_reply.started":"2024-12-04T16:09:45.464761Z","shell.execute_reply":"2024-12-04T16:09:45.468786Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"#  list all the files in the directory and store them in 'class_names' alphabetically\nclass_names = sorted(os.listdir(train_dir))\nprint(f\"Classes :{class_names}\")\n\n# number of classes present\nno_classes = len(class_names)\nprint(f\"Total Number of Classes : {no_classes}\")","metadata":{"_uuid":"4074f5d6-5252-4aff-bdfa-01d0588b750f","_cell_guid":"92a7de6d-3b1b-425b-b3fa-9fdb745dcc52","trusted":true,"collapsed":false,"id":"4WbIqsFK0d72","outputId":"140268ad-5dca-4792-c30a-3a60ba25d49d","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:01.529049Z","iopub.execute_input":"2024-12-04T16:10:01.529447Z","iopub.status.idle":"2024-12-04T16:10:01.551831Z","shell.execute_reply.started":"2024-12-04T16:10:01.529406Z","shell.execute_reply":"2024-12-04T16:10:01.550518Z"}},"outputs":[{"name":"stdout","text":"Classes :['downdog', 'goddess', 'plank', 'tree', 'warrior2']\nTotal Number of Classes : 5\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"class_dis_tr = [len(os.listdir(train_dir + f\"/{name}\")) for name in class_names]\nprint(class_dis_tr)\n\nclass_dis_te = [len(os.listdir(test_dir + f\"/{name}\")) for name in class_names]\nprint(class_dis_te)","metadata":{"_uuid":"0f3b48c0-79ce-495f-807c-723db16b8905","_cell_guid":"e00f3819-7b2b-4fa7-893b-f6e72b050315","trusted":true,"collapsed":false,"id":"yILHK8ohXGfz","outputId":"5b56c9e4-26cb-4139-f16b-da8b76daa703","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:13.486579Z","iopub.execute_input":"2024-12-04T16:10:13.487683Z","iopub.status.idle":"2024-12-04T16:10:13.559359Z","shell.execute_reply.started":"2024-12-04T16:10:13.487641Z","shell.execute_reply":"2024-12-04T16:10:13.558189Z"}},"outputs":[{"name":"stdout","text":"[223, 180, 266, 160, 252]\n[97, 80, 115, 69, 109]\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"## Load Data","metadata":{"_uuid":"cd4cee99-7cc2-42ec-bc20-32161ada65bc","_cell_guid":"b2e26921-521d-470d-ba35-1aa8b6ea3f0e","trusted":true,"collapsed":false,"id":"zL-mYfadxmJ2","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Set the batch size for training\nbatch_size=16\n\n# Set the number of epochs\nEPOCHS = 22","metadata":{"_uuid":"d40d155d-ce62-4163-8f97-a470b279a762","_cell_guid":"64f19a73-6933-47b6-96e7-2e4d9e538a98","trusted":true,"collapsed":false,"id":"lczOwHEq06g8","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:18.434299Z","iopub.execute_input":"2024-12-04T16:10:18.434686Z","iopub.status.idle":"2024-12-04T16:10:18.440132Z","shell.execute_reply.started":"2024-12-04T16:10:18.434649Z","shell.execute_reply":"2024-12-04T16:10:18.438590Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"## Data augmentation","metadata":{"_uuid":"680e9d4b-7940-4225-9310-4701f5cb5256","_cell_guid":"385bfbaf-704c-473f-a0ad-fbecabad1769","trusted":true,"collapsed":false,"id":"tVihjm-bbEv3","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Define the training data generator with specified augmentations\ntrain_datagen = IDG(shear_range=0.2,      # Randomly apply shearing transformations\n                    zoom_range=0.2,       # Randomly zoom inside images\n                    horizontal_flip=True, # Randomly flip images horizontally\n                    rescale = 1./255      # Rescale the pixel values to [0,1]\n                    )\n\n# Define the testing data generator with rescaling only\ntest_datagen = IDG(rescale = 1./255 )     # Rescale the pixel values to [0,1]","metadata":{"_uuid":"2326681b-f1cc-43bd-bb14-7bf2a2dfce4d","_cell_guid":"ee44a580-4afd-4e26-bf3b-c22057bfc087","trusted":true,"collapsed":false,"id":"UqIUlsTcl5Gl","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:23.851575Z","iopub.execute_input":"2024-12-04T16:10:23.852095Z","iopub.status.idle":"2024-12-04T16:10:23.858159Z","shell.execute_reply.started":"2024-12-04T16:10:23.852061Z","shell.execute_reply":"2024-12-04T16:10:23.856811Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Create a generator for training data from a directory\ntrain_generator =  train_datagen.flow_from_directory(train_dir,                 # Directory path for training data\n                                                    target_size = (224,224),    # Reshape images to the specified dimensions\n                                                    color_mode = 'rgb',         # Color mode set to RGB\n                                                    class_mode = 'categorical', # Use categorical labels\n                                                    batch_size = batch_size     # Set the batch size for training\n                                                     )\n\n# Create a generator for validation data from a directory\nvalidation_generator  = test_datagen.flow_from_directory(test_dir,              # Directory path for testing data\n                                                  target_size = (224,224),\n                                                  color_mode = 'rgb',\n                                                  class_mode = 'categorical'\n                                                 )","metadata":{"_uuid":"635f3085-d27f-4b8b-95a5-106870c9a0e7","_cell_guid":"26602a65-f840-4a2b-bc22-3642fc690003","trusted":true,"collapsed":false,"id":"b8cWUFZVl0AL","outputId":"e762f56a-f8c6-4d21-b9d8-9af1f6394c2e","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:29.601189Z","iopub.execute_input":"2024-12-04T16:10:29.601582Z","iopub.status.idle":"2024-12-04T16:10:31.083054Z","shell.execute_reply.started":"2024-12-04T16:10:29.601548Z","shell.execute_reply":"2024-12-04T16:10:31.081972Z"}},"outputs":[{"name":"stdout","text":"Found 1081 images belonging to 5 classes.\nFound 470 images belonging to 5 classes.\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"print(\"number of images\", train_generator.samples)\nprint(\"number of class\", len(train_generator.class_indices))\nprint(\"number of images in the classes\", train_generator.samples / len(train_generator.class_indices))\nprint(\"number of images\", validation_generator.samples)\nprint(\"number of class\", len(validation_generator.class_indices))\nprint(\"number of images in the classes\", validation_generator.samples / len(validation_generator.class_indices))","metadata":{"_uuid":"e22a5bc3-a151-4659-8c68-bcec934e2dc9","_cell_guid":"0d08b9d6-957a-4b0c-b36c-9786c29e6b1c","trusted":true,"collapsed":false,"id":"dgVImbVsevig","outputId":"5f42a00a-f7e9-422f-ab16-2e700471835e","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:36.907145Z","iopub.execute_input":"2024-12-04T16:10:36.907580Z","iopub.status.idle":"2024-12-04T16:10:36.915267Z","shell.execute_reply.started":"2024-12-04T16:10:36.907541Z","shell.execute_reply":"2024-12-04T16:10:36.913843Z"}},"outputs":[{"name":"stdout","text":"number of images 1081\nnumber of class 5\nnumber of images in the classes 216.2\nnumber of images 470\nnumber of class 5\nnumber of images in the classes 94.0\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"# Step 3: Model Creation","metadata":{"_uuid":"2719df32-26c5-4ebc-acc9-ca14830d6406","_cell_guid":"d200c99c-9530-4d19-aaa8-493e6f21a6e5","trusted":true,"collapsed":false,"id":"VDQfkOxQRcr7","jupyter":{"outputs_hidden":false}}},{"cell_type":"markdown","source":"## Model Creation","metadata":{"_uuid":"a6b0c8d8-40d6-4fa9-abed-a4384e53889a","_cell_guid":"be35845e-ca07-4291-bd15-0a009ccacd43","trusted":true,"collapsed":false,"id":"NFaszY3cSANz","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Model Name\nmodel_name = \"Yoga-Pose-Classification\"","metadata":{"_uuid":"e3dc626a-083b-4e07-b304-9b7592325add","_cell_guid":"b397739c-445a-46a4-bf46-7d2673fa4154","trusted":true,"collapsed":false,"id":"j5DR-yqkKerg","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:46.399169Z","iopub.execute_input":"2024-12-04T16:10:46.399557Z","iopub.status.idle":"2024-12-04T16:10:46.404488Z","shell.execute_reply.started":"2024-12-04T16:10:46.399524Z","shell.execute_reply":"2024-12-04T16:10:46.403369Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"# Load VGG16 pre-trained model\nvgg16 = VGG16(include_top=False,\n              weights='imagenet',\n              input_shape=(224,224,3),\n              pooling=None)","metadata":{"_uuid":"68c9a6fd-7094-4342-b8f3-a38fb0af5fbd","_cell_guid":"7edc2023-60b8-4e8b-9463-ff47d5d778e7","trusted":true,"collapsed":false,"id":"sEN63pmPMpen","outputId":"3b4f3c3e-49f1-4eec-a3c8-a9aa42da1220","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:10:50.845177Z","iopub.execute_input":"2024-12-04T16:10:50.845549Z","iopub.status.idle":"2024-12-04T16:10:54.955234Z","shell.execute_reply.started":"2024-12-04T16:10:50.845520Z","shell.execute_reply":"2024-12-04T16:10:54.953980Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Set all layers in the VGG16 model to be non-trainable\nfor layer in vgg16.layers:\n    layer.trainable = False","metadata":{"_uuid":"f8405c3c-63a0-434c-896a-558f118a4a0b","_cell_guid":"b4b1037a-6305-494d-bbc9-ab2aca0da991","trusted":true,"collapsed":false,"id":"0fW6oC6CMrd3","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:11:18.794422Z","iopub.execute_input":"2024-12-04T16:11:18.794851Z","iopub.status.idle":"2024-12-04T16:11:18.800486Z","shell.execute_reply.started":"2024-12-04T16:11:18.794816Z","shell.execute_reply":"2024-12-04T16:11:18.799269Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# Define a function to create the baseline model\ndef create_baseline():\n\n    # Instantiate the sequential model and add the VGG16 model:\n    model_vgg = Sequential(name=model_name+\"_VGG\")\n    model_vgg.add(vgg16)\n\n    # Add the custom layers atop the VGG19 model:\n    model_vgg.add(Flatten(name='flattened'))                                    # Flattens the input without affecting the batch size\n    model_vgg.add(Dropout(0.5, name='dropout1'))                                # Apply dropout to prevent overfitting\n    model_vgg.add(Dense(256, activation='relu'))                                # Add a fully connected layer with ReLU activation\n    model_vgg.add(Dropout(0.2, name='dropout2'))                                # Apply another dropout\n    model_vgg.add(Dense(no_classes, activation='softmax', name='predictions'))  # Add the output layer with softmax activation\n\n    return model_vgg","metadata":{"_uuid":"3cdb99ac-3029-4151-80c0-b7f9449469aa","_cell_guid":"96c20f8b-e2b8-48d3-9911-4309674eb2e6","trusted":true,"collapsed":false,"id":"PxEGlFhaXNHV","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:11:24.272634Z","iopub.execute_input":"2024-12-04T16:11:24.273164Z","iopub.status.idle":"2024-12-04T16:11:24.280350Z","shell.execute_reply.started":"2024-12-04T16:11:24.273128Z","shell.execute_reply":"2024-12-04T16:11:24.279047Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Create the VGG16-based model\nmodel_vgg = create_baseline()","metadata":{"_uuid":"37a9ebdc-de66-464d-a8d2-74eda4c39827","_cell_guid":"13954fa1-a870-4c42-929c-a45a2d9b810a","trusted":true,"collapsed":false,"id":"SlHD418IX-2S","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:11:32.096133Z","iopub.execute_input":"2024-12-04T16:11:32.096524Z","iopub.status.idle":"2024-12-04T16:11:32.111846Z","shell.execute_reply.started":"2024-12-04T16:11:32.096489Z","shell.execute_reply":"2024-12-04T16:11:32.110544Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Display a summary of the model architecture\nmodel_vgg.summary()","metadata":{"_uuid":"7fb9a4ad-5d47-4bd0-b3b9-10b61032a61d","_cell_guid":"35aa65c2-0a91-4d5a-9299-e890903f862e","trusted":true,"collapsed":false,"id":"WSorJwLRMwN_","outputId":"a95ee466-4e1a-4a02-a247-108d691ad4f7","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:11:36.722325Z","iopub.execute_input":"2024-12-04T16:11:36.722729Z","iopub.status.idle":"2024-12-04T16:11:36.746268Z","shell.execute_reply.started":"2024-12-04T16:11:36.722665Z","shell.execute_reply":"2024-12-04T16:11:36.745250Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"Yoga-Pose-Classification_VGG\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"Yoga-Pose-Classification_VGG\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (\u001b[38;5;33mFunctional\u001b[0m)              │ ?                      │    \u001b[38;5;34m14,714,688\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flattened (\u001b[38;5;33mFlatten\u001b[0m)             │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout1 (\u001b[38;5;33mDropout\u001b[0m)              │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout2 (\u001b[38;5;33mDropout\u001b[0m)              │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ predictions (\u001b[38;5;33mDense\u001b[0m)             │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ ?                      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flattened (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)              │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)              │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ predictions (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)             │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n</pre>\n"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"model_vgg.build()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-04T16:13:36.317169Z","iopub.execute_input":"2024-12-04T16:13:36.317585Z","iopub.status.idle":"2024-12-04T16:13:36.323134Z","shell.execute_reply.started":"2024-12-04T16:13:36.317551Z","shell.execute_reply":"2024-12-04T16:13:36.321819Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Plot the model architecture and save it to an image file\nplot_model(model_vgg)\n# Plot the model architecture and save it to an image file\n# plot_model(model_vgg, to_file=image_path(model_name+\"_vgg.png\"))","metadata":{"_uuid":"98fbbdfc-2f26-4655-8b31-5acd08498d48","_cell_guid":"e9c6e3d5-c91d-4961-9c8b-b9f290ace771","trusted":true,"collapsed":false,"id":"koXHNi8IN3rL","outputId":"ea65eaa3-0927-46f4-c9a2-9f926e844f72","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:15:55.863016Z","iopub.execute_input":"2024-12-04T16:15:55.863404Z","iopub.status.idle":"2024-12-04T16:15:55.947730Z","shell.execute_reply.started":"2024-12-04T16:15:55.863374Z","shell.execute_reply":"2024-12-04T16:15:55.946767Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"image/png":"","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}],"execution_count":22},{"cell_type":"markdown","source":"## Compile Model","metadata":{"_uuid":"c36658ae-ab08-4feb-9192-6a0fc50e474d","_cell_guid":"dd29b61d-ecff-4629-829c-56efee4bfa5f","trusted":true,"collapsed":false,"id":"pdJVrCd3SMfV","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Compile the model with specified loss function, optimizer, and metrics\nmodel_vgg.compile(\n    loss='categorical_crossentropy',# Categorical cross-entropy loss for multi-class classification\n    optimizer=Adam(0.001),          # Adam optimizer with a learning rate of 0.001\n    metrics=[\"accuracy\"]            # Monitor the accuracy metric during training\n)","metadata":{"_uuid":"3cc7c564-3816-444b-9b75-a2a14caea1d5","_cell_guid":"b38b9534-69ee-4d8f-b9e9-b12f3f89b485","trusted":true,"collapsed":false,"id":"I5lcuvvpF1rA","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:16:08.644723Z","iopub.execute_input":"2024-12-04T16:16:08.645122Z","iopub.status.idle":"2024-12-04T16:16:08.662017Z","shell.execute_reply.started":"2024-12-04T16:16:08.645090Z","shell.execute_reply":"2024-12-04T16:16:08.660869Z"}},"outputs":[],"execution_count":23},{"cell_type":"markdown","source":"## Callbacks","metadata":{"_uuid":"413c8dbe-5488-4bb8-be05-ee2b2ee1948a","_cell_guid":"0c1a7070-0187-4018-a427-11eb4fe9b784","trusted":true,"collapsed":false,"id":"pCTEwFVVbATV","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"# Create a ReduceLROnPlateau callback with the following parameters:\n# This callback monitors the validation accuracy and adjusts the learning rate when the validation accuracy plateaus\nlr_reduction = ReduceLROnPlateau(monitor='val_accuracy',    # Monitors the validation accuracy to decide when to reduce the learning rate.\n                                            patience=3,     # Number of epochs with no improvement after which learning rate will be reduced\n                                            verbose=1,      # Verbosity level. 1 for updating messages, 0 for silence.\n                                            factor=0.5,     # Learning rate will be reduced to half. New_lr = lr * factor\n                                            min_lr=0.00001  # Lower bound on the learning rate. It won't reduce the learning rate below this value\n                                 )","metadata":{"_uuid":"19a0d497-3424-4d59-8624-5e12b8ba41a8","_cell_guid":"d8a4306b-1c8d-41d7-b944-6156525dfe19","trusted":true,"collapsed":false,"id":"Plrn7snkJeU2","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:16:15.166573Z","iopub.execute_input":"2024-12-04T16:16:15.166977Z","iopub.status.idle":"2024-12-04T16:16:15.172477Z","shell.execute_reply.started":"2024-12-04T16:16:15.166944Z","shell.execute_reply":"2024-12-04T16:16:15.171131Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# Store the ReduceLROnPlateau callback in a list. This list can be passed to a training session.\ncbs = [lr_reduction]","metadata":{"_uuid":"11e67e28-f40a-467b-8443-94c0d5cfdc29","_cell_guid":"ef612301-bd26-42ae-bb5d-bf35be89f161","trusted":true,"collapsed":false,"id":"H8NB7wCYJmht","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:16:19.931796Z","iopub.execute_input":"2024-12-04T16:16:19.932188Z","iopub.status.idle":"2024-12-04T16:16:19.937654Z","shell.execute_reply.started":"2024-12-04T16:16:19.932155Z","shell.execute_reply":"2024-12-04T16:16:19.936308Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"## Train the Model","metadata":{"_uuid":"a46236ae-966f-4300-89dc-1b2dac28801a","_cell_guid":"2c189bff-e828-437a-a841-3656c7b9b0cc","trusted":true,"collapsed":false,"id":"Nr8wQQb7bmkj","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"history = model_vgg.fit(train_generator,\n                    validation_data=validation_generator,\n                    epochs=EPOCHS,\n                    batch_size=batch_size,\n                    callbacks=cbs,\n                    shuffle=True)","metadata":{"_uuid":"2b6fe89a-58f5-40c1-9e0b-3ab955821313","_cell_guid":"e962b8d9-5cdb-458f-a114-2ade485a8a35","trusted":true,"collapsed":false,"id":"OdKsF5YMKH_m","outputId":"9e4d9647-0ec5-430b-bbd7-0ca9bb9ef935","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T16:16:22.970591Z","iopub.execute_input":"2024-12-04T16:16:22.971009Z","iopub.status.idle":"2024-12-04T19:08:11.567053Z","shell.execute_reply.started":"2024-12-04T16:16:22.970974Z","shell.execute_reply":"2024-12-04T19:08:11.566059Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m428s\u001b[0m 6s/step - accuracy: 0.4635 - loss: 2.7457 - val_accuracy: 0.9362 - val_loss: 0.2325 - learning_rate: 0.0010\nEpoch 2/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m405s\u001b[0m 6s/step - accuracy: 0.8338 - loss: 0.4899 - val_accuracy: 0.9574 - val_loss: 0.1547 - learning_rate: 0.0010\nEpoch 3/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m405s\u001b[0m 6s/step - accuracy: 0.8708 - loss: 0.4184 - val_accuracy: 0.9447 - val_loss: 0.1920 - learning_rate: 0.0010\nEpoch 4/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m405s\u001b[0m 6s/step - accuracy: 0.8812 - loss: 0.3884 - val_accuracy: 0.9617 - val_loss: 0.1131 - learning_rate: 0.0010\nEpoch 5/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m425s\u001b[0m 6s/step - accuracy: 0.9150 - loss: 0.2818 - val_accuracy: 0.9638 - val_loss: 0.1192 - learning_rate: 0.0010\nEpoch 6/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m404s\u001b[0m 6s/step - accuracy: 0.9171 - loss: 0.2204 - val_accuracy: 0.9681 - val_loss: 0.1081 - learning_rate: 0.0010\nEpoch 7/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m443s\u001b[0m 6s/step - accuracy: 0.9390 - loss: 0.1691 - val_accuracy: 0.9638 - val_loss: 0.1047 - learning_rate: 0.0010\nEpoch 8/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m405s\u001b[0m 6s/step - accuracy: 0.9560 - loss: 0.1493 - val_accuracy: 0.9638 - val_loss: 0.1083 - learning_rate: 0.0010\nEpoch 9/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - accuracy: 0.9398 - loss: 0.1910\nEpoch 9: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m405s\u001b[0m 6s/step - accuracy: 0.9399 - loss: 0.1907 - val_accuracy: 0.9617 - val_loss: 0.1067 - learning_rate: 0.0010\nEpoch 10/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m405s\u001b[0m 6s/step - accuracy: 0.9601 - loss: 0.1213 - val_accuracy: 0.9660 - val_loss: 0.1000 - learning_rate: 5.0000e-04\nEpoch 11/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m402s\u001b[0m 6s/step - accuracy: 0.9700 - loss: 0.0917 - val_accuracy: 0.9745 - val_loss: 0.0932 - learning_rate: 5.0000e-04\nEpoch 12/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m404s\u001b[0m 6s/step - accuracy: 0.9679 - loss: 0.0978 - val_accuracy: 0.9723 - val_loss: 0.0931 - learning_rate: 5.0000e-04\nEpoch 13/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m405s\u001b[0m 6s/step - accuracy: 0.9800 - loss: 0.0750 - val_accuracy: 0.9681 - val_loss: 0.0985 - learning_rate: 5.0000e-04\nEpoch 14/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - accuracy: 0.9781 - loss: 0.0736\nEpoch 14: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m425s\u001b[0m 6s/step - accuracy: 0.9780 - loss: 0.0737 - val_accuracy: 0.9702 - val_loss: 0.0919 - learning_rate: 5.0000e-04\nEpoch 15/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m404s\u001b[0m 6s/step - accuracy: 0.9776 - loss: 0.0702 - val_accuracy: 0.9745 - val_loss: 0.0936 - learning_rate: 2.5000e-04\nEpoch 16/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m443s\u001b[0m 6s/step - accuracy: 0.9861 - loss: 0.0562 - val_accuracy: 0.9787 - val_loss: 0.0939 - learning_rate: 2.5000e-04\nEpoch 17/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m407s\u001b[0m 6s/step - accuracy: 0.9801 - loss: 0.0658 - val_accuracy: 0.9809 - val_loss: 0.0931 - learning_rate: 2.5000e-04\nEpoch 18/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m410s\u001b[0m 6s/step - accuracy: 0.9797 - loss: 0.0608 - val_accuracy: 0.9787 - val_loss: 0.0812 - learning_rate: 2.5000e-04\nEpoch 19/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m408s\u001b[0m 6s/step - accuracy: 0.9889 - loss: 0.0447 - val_accuracy: 0.9745 - val_loss: 0.0887 - learning_rate: 2.5000e-04\nEpoch 20/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - accuracy: 0.9680 - loss: 0.0832\nEpoch 20: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m429s\u001b[0m 6s/step - accuracy: 0.9682 - loss: 0.0830 - val_accuracy: 0.9745 - val_loss: 0.0984 - learning_rate: 2.5000e-04\nEpoch 21/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m409s\u001b[0m 6s/step - accuracy: 0.9913 - loss: 0.0385 - val_accuracy: 0.9787 - val_loss: 0.0922 - learning_rate: 1.2500e-04\nEpoch 22/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m409s\u001b[0m 6s/step - accuracy: 0.9932 - loss: 0.0447 - val_accuracy: 0.9787 - val_loss: 0.0913 - learning_rate: 1.2500e-04\nEpoch 23/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4s/step - accuracy: 0.9893 - loss: 0.0356\nEpoch 23: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m409s\u001b[0m 6s/step - accuracy: 0.9893 - loss: 0.0356 - val_accuracy: 0.9766 - val_loss: 0.0942 - learning_rate: 1.2500e-04\nEpoch 24/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m409s\u001b[0m 6s/step - accuracy: 0.9911 - loss: 0.0362 - val_accuracy: 0.9787 - val_loss: 0.0939 - learning_rate: 6.2500e-05\nEpoch 25/25\n\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m407s\u001b[0m 6s/step - accuracy: 0.9883 - loss: 0.0440 - val_accuracy: 0.9766 - val_loss: 0.0952 - learning_rate: 6.2500e-05\n","output_type":"stream"}],"execution_count":26},{"cell_type":"markdown","source":"# Step 4: Evaluate: Plot the Graphs","metadata":{"_uuid":"01c15f69-b932-4c2c-a0f8-7495c7e10945","_cell_guid":"0343a7b6-4ac8-44d0-827b-2701deef45f4","trusted":true,"collapsed":false,"id":"Lg7Wfedylmek","jupyter":{"outputs_hidden":false}}},{"cell_type":"code","source":"plot_metric(history)","metadata":{"_uuid":"a26e5b97-385d-47b8-8c6f-ae6458772a03","_cell_guid":"7000234e-53d0-49ef-9a6c-78168ed2a97c","trusted":true,"collapsed":false,"id":"tjy97sov1MzI","outputId":"522e26b5-fe83-497c-9b39-c57a688c4cb3","jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Save the model to a file\n# model_vgg.save(model_path(model_name+'_vgg16.h5'))","metadata":{"_uuid":"e46bd103-4694-46b9-ba90-6704d26eda1c","_cell_guid":"5aab55d0-3220-45e0-bf7b-dbfb397a7d40","trusted":true,"collapsed":false,"id":"w0p0d_VB8qfy","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T19:08:13.334157Z","iopub.status.idle":"2024-12-04T19:08:13.334690Z","shell.execute_reply.started":"2024-12-04T19:08:13.334424Z","shell.execute_reply":"2024-12-04T19:08:13.334452Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_loss, train_acc = model_vgg.evaluate(train_generator)\ntest_loss, test_acc   = model_vgg.evaluate(validation_generator)\nprint(\"Final train accuracy = {:.2f} , validation accuracy = {:.2f}\".format(train_acc*100, test_acc*100))","metadata":{"_uuid":"9e5f2b99-87dc-4a00-9898-4fb92727f876","_cell_guid":"4095c458-5aa6-49fe-bf79-96a73f7e1747","trusted":true,"collapsed":false,"id":"91Lij3fOjuzA","outputId":"68bf7a51-d625-4349-d567-f0b9fce63199","jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-04T19:09:30.179449Z","iopub.execute_input":"2024-12-04T19:09:30.179885Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m282s\u001b[0m 4s/step - accuracy: 0.9964 - loss: 0.0144\n\u001b[1m 1/15\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2:04\u001b[0m 9s/step - accuracy: 0.9375 - loss: 0.0714","output_type":"stream"}],"execution_count":null}]}