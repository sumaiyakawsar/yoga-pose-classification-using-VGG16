{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "72334e72",
   "metadata": {
    "papermill": {
     "duration": 0.007764,
     "end_time": "2024-12-04T22:03:13.560604",
     "exception": false,
     "start_time": "2024-12-04T22:03:13.552840",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Yoga Pose Classification Using VGG16\n",
    "This notebook demonstrates how to classify yoga poses using transfer learning with the VGG16 model. We'll cover data preprocessing, model creation, training, and evaluation while adhering to good coding practices.\n",
    "\n",
    "### Key Features\n",
    "\n",
    "* Used VGG16 pre-trained model for feature extraction.\n",
    "* Implemented data augmentation for better generalization.\n",
    "* Achieved high accuracy using transfer learning with minimal fine-tuning.\n",
    "* Visualized training and validation curves for performance insights.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dfd4dae",
   "metadata": {
    "_cell_guid": "aa601be1-3e32-4d41-bc5e-7f6efb6c52f3",
    "_uuid": "d3db7ede-04c9-4a08-b121-60a1bc750800",
    "collapsed": false,
    "id": "SiODyt2aXFpN",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.005682,
     "end_time": "2024-12-04T22:03:13.574257",
     "exception": false,
     "start_time": "2024-12-04T22:03:13.568575",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 1: Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d30f84be",
   "metadata": {
    "_cell_guid": "9b522c7f-daa8-43fd-a849-c39625c3eb73",
    "_uuid": "70d559f8-5f05-4d27-97a8-a80cfbfd5cd7",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:13.587011Z",
     "iopub.status.busy": "2024-12-04T22:03:13.586739Z",
     "iopub.status.idle": "2024-12-04T22:03:25.118440Z",
     "shell.execute_reply": "2024-12-04T22:03:25.117678Z"
    },
    "id": "13ZKvdzRXF-C",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 11.540247,
     "end_time": "2024-12-04T22:03:25.120309",
     "exception": false,
     "start_time": "2024-12-04T22:03:13.580062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import Data Science Libraries\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import os\n",
    "import warnings\n",
    "\n",
    "# Import visualization libraries\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Tensorflow Libraries\n",
    "from keras.models import Sequential, load_model\n",
    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator as IDG\n",
    "from keras.preprocessing import image\n",
    "from keras.applications.vgg16 import VGG16, preprocess_input\n",
    "from keras.utils import plot_model\n",
    "# Callbacks\n",
    "from keras.callbacks import Callback, ReduceLROnPlateau\n",
    "# LR Scheduler\n",
    "from keras.optimizers import Adam\n",
    "from PIL import Image, ImageFile\n",
    "\n",
    "# %matplotlib inline\n",
    "warnings.filterwarnings('ignore')\n",
    "ImageFile.LOAD_TRUNCATED_IMAGES = True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a26792f9",
   "metadata": {
    "_cell_guid": "8dfda528-9b23-4af1-bbc0-82d1eb5c6a78",
    "_uuid": "a45dc7bf-66af-45a5-93e1-916ba439b336",
    "collapsed": false,
    "id": "rFZBVmx7fBfI",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.005817,
     "end_time": "2024-12-04T22:03:25.132513",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.126696",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step Bonus: Define Reusable Functions\n",
    "\n",
    "To streamline the process, reusable functions for generating paths and plotting metrics are defined:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8ad00c0f",
   "metadata": {
    "_cell_guid": "590d91be-6959-45a9-9906-907550c32f9e",
    "_uuid": "59178373-51e7-48ed-b196-b6e3bce8bfd2",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:25.145919Z",
     "iopub.status.busy": "2024-12-04T22:03:25.145442Z",
     "iopub.status.idle": "2024-12-04T22:03:25.152242Z",
     "shell.execute_reply": "2024-12-04T22:03:25.151589Z"
    },
    "id": "kPpXZW04evap",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.015066,
     "end_time": "2024-12-04T22:03:25.153771",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.138705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def image_path(image_name):\n",
    "    \"\"\"Returns the full path of an image given its name.\"\"\"\n",
    "    return os.path.join(images_dir, image_name)\n",
    "\n",
    "def model_path(model_name):\n",
    "    \"\"\"Returns the full path of a model given its name.\"\"\"\n",
    "    return os.path.join(model_dir, model_name)\n",
    "    \n",
    "def plot_metric(history):\n",
    "    \"\"\"Plots training and validation accuracy/loss curves.\"\"\"\n",
    "    train_accuracy = history.history['accuracy']\n",
    "    val_accuracy = history.history['val_accuracy']\n",
    "    train_loss = history.history['loss']\n",
    "    val_loss = history.history['val_loss']\n",
    "    epochs = range(1, len(train_accuracy) + 1)\n",
    "    \n",
    "    # Plot accuracy\n",
    "    plt.plot(epochs, train_accuracy, label='training_accuracy')\n",
    "    plt.plot(epochs, val_accuracy, label='val_accuracy')\n",
    "    plt.title('Training and validation accuracy')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.legend()\n",
    "    # plt.savefig(image_path(\"Training and validation accuracy.png\"))\n",
    "\n",
    "    # Plot loss\n",
    "    plt.figure()\n",
    "    plt.plot(epochs, train_loss,label='training_loss')\n",
    "    plt.plot(epochs, val_loss, label='val_loss')\n",
    "    plt.title('Training and validation loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.legend([\"train_loss\", 'val_loss'])\n",
    "\n",
    "    #Save image\n",
    "    # plt.savefig(image_path(\"Training and validation loss.png\"))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5fff424",
   "metadata": {
    "_cell_guid": "034584d0-599e-4e9b-92bf-25004413321e",
    "_uuid": "db41ac2f-ed7d-48ee-96e5-d76f94d15f44",
    "collapsed": false,
    "id": "GDQJ3ExZtClT",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.0057,
     "end_time": "2024-12-04T22:03:25.165414",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.159714",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 2: Data Preprocessing\n",
    "\n",
    "### 2.1 Set Up Directories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40da525a",
   "metadata": {
    "_cell_guid": "c5e08630-9b60-4d67-8a98-0c2e0826e267",
    "_uuid": "66ab397f-d5d7-4f46-aea2-350968c13ab8",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:25.178389Z",
     "iopub.status.busy": "2024-12-04T22:03:25.178095Z",
     "iopub.status.idle": "2024-12-04T22:03:25.181878Z",
     "shell.execute_reply": "2024-12-04T22:03:25.181081Z"
    },
    "id": "mNdBNhBCjIUa",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.012214,
     "end_time": "2024-12-04T22:03:25.183564",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.171350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Setting the path to the training directory that contains the data for yoga asanas\n",
    "train_dir = '/kaggle/input/yoga-poses-dataset/DATASET/TRAIN'\n",
    "\n",
    "# Setting the path to the test directory that contains the data for yoga asanas\n",
    "test_dir = '/kaggle/input/yoga-poses-dataset/DATASET/TEST'\n",
    "\n",
    "# Setting the path to the directory containing images for the assignment\n",
    "images_dir = '/kaggle/working/Images'\n",
    "\n",
    "# Setting the path to the directory where the trained models will be saved\n",
    "model_dir = '/kaggle/working/Models'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "385c069b",
   "metadata": {
    "_cell_guid": "92a7de6d-3b1b-425b-b3fa-9fdb745dcc52",
    "_uuid": "4074f5d6-5252-4aff-bdfa-01d0588b750f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:25.196499Z",
     "iopub.status.busy": "2024-12-04T22:03:25.196218Z",
     "iopub.status.idle": "2024-12-04T22:03:25.213702Z",
     "shell.execute_reply": "2024-12-04T22:03:25.212766Z"
    },
    "id": "4WbIqsFK0d72",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "140268ad-5dca-4792-c30a-3a60ba25d49d",
    "papermill": {
     "duration": 0.025835,
     "end_time": "2024-12-04T22:03:25.215325",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.189490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classes :['downdog', 'goddess', 'plank', 'tree', 'warrior2']\n",
      "Total Number of Classes : 5\n"
     ]
    }
   ],
   "source": [
    "#  list all the files in the directory and store them in 'class_names' alphabetically\n",
    "class_names = sorted(os.listdir(train_dir))\n",
    "# number of classes present\n",
    "no_classes = len(class_names)\n",
    "\n",
    "print(f\"Classes :{class_names}\")\n",
    "print(f\"Total Number of Classes : {no_classes}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9e18fdc8",
   "metadata": {
    "_cell_guid": "e00f3819-7b2b-4fa7-893b-f6e72b050315",
    "_uuid": "0f3b48c0-79ce-495f-807c-723db16b8905",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:25.228860Z",
     "iopub.status.busy": "2024-12-04T22:03:25.228616Z",
     "iopub.status.idle": "2024-12-04T22:03:25.397251Z",
     "shell.execute_reply": "2024-12-04T22:03:25.396286Z"
    },
    "id": "yILHK8ohXGfz",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "5b56c9e4-26cb-4139-f16b-da8b76daa703",
    "papermill": {
     "duration": 0.177107,
     "end_time": "2024-12-04T22:03:25.398873",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.221766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[223, 180, 266, 160, 252]\n",
      "[97, 80, 115, 69, 109]\n"
     ]
    }
   ],
   "source": [
    "class_dis_tr = [len(os.listdir(train_dir + f\"/{name}\")) for name in class_names]\n",
    "print(class_dis_tr)\n",
    "\n",
    "class_dis_te = [len(os.listdir(test_dir + f\"/{name}\")) for name in class_names]\n",
    "print(class_dis_te)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42172310",
   "metadata": {
    "_cell_guid": "b2e26921-521d-470d-ba35-1aa8b6ea3f0e",
    "_uuid": "cd4cee99-7cc2-42ec-bc20-32161ada65bc",
    "collapsed": false,
    "id": "zL-mYfadxmJ2",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.006048,
     "end_time": "2024-12-04T22:03:25.410762",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.404714",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2.2 Initialize Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "31bfb1cc",
   "metadata": {
    "_cell_guid": "64f19a73-6933-47b6-96e7-2e4d9e538a98",
    "_uuid": "d40d155d-ce62-4163-8f97-a470b279a762",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:25.424286Z",
     "iopub.status.busy": "2024-12-04T22:03:25.424023Z",
     "iopub.status.idle": "2024-12-04T22:03:25.427492Z",
     "shell.execute_reply": "2024-12-04T22:03:25.426691Z"
    },
    "id": "lczOwHEq06g8",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.012139,
     "end_time": "2024-12-04T22:03:25.429150",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.417011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Set the batch size for training\n",
    "batch_size=16\n",
    "\n",
    "# Set the number of epochs\n",
    "EPOCHS = 22"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94b85cf2",
   "metadata": {
    "_cell_guid": "385bfbaf-704c-473f-a0ad-fbecabad1769",
    "_uuid": "680e9d4b-7940-4225-9310-4701f5cb5256",
    "collapsed": false,
    "id": "tVihjm-bbEv3",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.005892,
     "end_time": "2024-12-04T22:03:25.440950",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.435058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2.3 Data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c72a8e76",
   "metadata": {
    "_cell_guid": "ee44a580-4afd-4e26-bf3b-c22057bfc087",
    "_uuid": "2326681b-f1cc-43bd-bb14-7bf2a2dfce4d",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:25.453705Z",
     "iopub.status.busy": "2024-12-04T22:03:25.453466Z",
     "iopub.status.idle": "2024-12-04T22:03:25.457368Z",
     "shell.execute_reply": "2024-12-04T22:03:25.456687Z"
    },
    "id": "UqIUlsTcl5Gl",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.012015,
     "end_time": "2024-12-04T22:03:25.458898",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.446883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the training data generator with specified augmentations\n",
    "train_datagen = IDG(shear_range=0.2,      # Randomly apply shearing transformations\n",
    "                    zoom_range=0.2,       # Randomly zoom inside images\n",
    "                    horizontal_flip=True, # Randomly flip images horizontally\n",
    "                    rescale = 1./255      # Rescale the pixel values to [0,1]\n",
    "                    )\n",
    "\n",
    "# Define the testing data generator with rescaling only\n",
    "test_datagen = IDG(rescale = 1./255 )     # Rescale the pixel values to [0,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "820b2456",
   "metadata": {
    "_cell_guid": "26602a65-f840-4a2b-bc22-3642fc690003",
    "_uuid": "635f3085-d27f-4b8b-95a5-106870c9a0e7",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:25.471919Z",
     "iopub.status.busy": "2024-12-04T22:03:25.471686Z",
     "iopub.status.idle": "2024-12-04T22:03:29.812254Z",
     "shell.execute_reply": "2024-12-04T22:03:29.811388Z"
    },
    "id": "b8cWUFZVl0AL",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "e762f56a-f8c6-4d21-b9d8-9af1f6394c2e",
    "papermill": {
     "duration": 4.349093,
     "end_time": "2024-12-04T22:03:29.813942",
     "exception": false,
     "start_time": "2024-12-04T22:03:25.464849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1081 images belonging to 5 classes.\n",
      "Found 470 images belonging to 5 classes.\n"
     ]
    }
   ],
   "source": [
    "# Create a generator for training data from a directory\n",
    "train_generator =  train_datagen.flow_from_directory(train_dir,                 # Directory path for training data\n",
    "                                                    target_size = (224,224),    # Reshape images to the specified dimensions\n",
    "                                                    color_mode = 'rgb',         # Color mode set to RGB\n",
    "                                                    class_mode = 'categorical', # Use categorical labels\n",
    "                                                    batch_size = batch_size     # Set the batch size for training\n",
    "                                                     )\n",
    "\n",
    "# Create a generator for validation data from a directory\n",
    "validation_generator  = test_datagen.flow_from_directory(test_dir,              # Directory path for testing data\n",
    "                                                  target_size = (224,224),\n",
    "                                                  color_mode = 'rgb',\n",
    "                                                  class_mode = 'categorical'\n",
    "                                                 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "33f25d34",
   "metadata": {
    "_cell_guid": "0d08b9d6-957a-4b0c-b36c-9786c29e6b1c",
    "_uuid": "e22a5bc3-a151-4659-8c68-bcec934e2dc9",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:29.828265Z",
     "iopub.status.busy": "2024-12-04T22:03:29.827802Z",
     "iopub.status.idle": "2024-12-04T22:03:29.832796Z",
     "shell.execute_reply": "2024-12-04T22:03:29.832000Z"
    },
    "id": "dgVImbVsevig",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "5f42a00a-f7e9-422f-ab16-2e700471835e",
    "papermill": {
     "duration": 0.013808,
     "end_time": "2024-12-04T22:03:29.834377",
     "exception": false,
     "start_time": "2024-12-04T22:03:29.820569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of images 1081\n",
      "number of class 5\n",
      "number of images in the classes 216.2\n",
      "number of images 470\n",
      "number of class 5\n",
      "number of images in the classes 94.0\n"
     ]
    }
   ],
   "source": [
    "print(\"number of images\", train_generator.samples)\n",
    "print(\"number of class\", len(train_generator.class_indices))\n",
    "print(\"number of images in the classes\", train_generator.samples / len(train_generator.class_indices))\n",
    "\n",
    "print(\"number of images\", validation_generator.samples)\n",
    "print(\"number of class\", len(validation_generator.class_indices))\n",
    "print(\"number of images in the classes\", validation_generator.samples / len(validation_generator.class_indices))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a88faafa",
   "metadata": {
    "_cell_guid": "d200c99c-9530-4d19-aaa8-493e6f21a6e5",
    "_uuid": "2719df32-26c5-4ebc-acc9-ca14830d6406",
    "collapsed": false,
    "id": "VDQfkOxQRcr7",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.006142,
     "end_time": "2024-12-04T22:03:29.846623",
     "exception": false,
     "start_time": "2024-12-04T22:03:29.840481",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 3: Model Creation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a72eff2",
   "metadata": {
    "_cell_guid": "be35845e-ca07-4291-bd15-0a009ccacd43",
    "_uuid": "a6b0c8d8-40d6-4fa9-abed-a4384e53889a",
    "collapsed": false,
    "id": "NFaszY3cSANz",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.005999,
     "end_time": "2024-12-04T22:03:29.859096",
     "exception": false,
     "start_time": "2024-12-04T22:03:29.853097",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3.1 Model Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4ad3d148",
   "metadata": {
    "_cell_guid": "b397739c-445a-46a4-bf46-7d2673fa4154",
    "_uuid": "e3dc626a-083b-4e07-b304-9b7592325add",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:29.872517Z",
     "iopub.status.busy": "2024-12-04T22:03:29.871906Z",
     "iopub.status.idle": "2024-12-04T22:03:29.875507Z",
     "shell.execute_reply": "2024-12-04T22:03:29.874630Z"
    },
    "id": "j5DR-yqkKerg",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.012092,
     "end_time": "2024-12-04T22:03:29.877249",
     "exception": false,
     "start_time": "2024-12-04T22:03:29.865157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Model Name\n",
    "model_name = \"Yoga-Pose-Classification\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "94378614",
   "metadata": {
    "_cell_guid": "7edc2023-60b8-4e8b-9463-ff47d5d778e7",
    "_uuid": "68c9a6fd-7094-4342-b8f3-a38fb0af5fbd",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:29.890298Z",
     "iopub.status.busy": "2024-12-04T22:03:29.890037Z",
     "iopub.status.idle": "2024-12-04T22:03:31.786316Z",
     "shell.execute_reply": "2024-12-04T22:03:31.785612Z"
    },
    "id": "sEN63pmPMpen",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "3b4f3c3e-49f1-4eec-a3c8-a9aa42da1220",
    "papermill": {
     "duration": 1.905203,
     "end_time": "2024-12-04T22:03:31.788432",
     "exception": false,
     "start_time": "2024-12-04T22:03:29.883229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
      "\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n"
     ]
    }
   ],
   "source": [
    "# Load VGG16 pre-trained model\n",
    "vgg16 = VGG16(include_top=False,\n",
    "              weights='imagenet',\n",
    "              input_shape=(224,224,3),\n",
    "              pooling=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8e6897a3",
   "metadata": {
    "_cell_guid": "b4b1037a-6305-494d-bbc9-ab2aca0da991",
    "_uuid": "f8405c3c-63a0-434c-896a-558f118a4a0b",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:31.803670Z",
     "iopub.status.busy": "2024-12-04T22:03:31.803387Z",
     "iopub.status.idle": "2024-12-04T22:03:31.807733Z",
     "shell.execute_reply": "2024-12-04T22:03:31.806684Z"
    },
    "id": "0fW6oC6CMrd3",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.014114,
     "end_time": "2024-12-04T22:03:31.809843",
     "exception": false,
     "start_time": "2024-12-04T22:03:31.795729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Set all layers in the VGG16 model to be non-trainable\n",
    "for layer in vgg16.layers:\n",
    "    layer.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e81b891b",
   "metadata": {
    "_cell_guid": "96c20f8b-e2b8-48d3-9911-4309674eb2e6",
    "_uuid": "3cdb99ac-3029-4151-80c0-b7f9449469aa",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:31.824267Z",
     "iopub.status.busy": "2024-12-04T22:03:31.823870Z",
     "iopub.status.idle": "2024-12-04T22:03:31.828930Z",
     "shell.execute_reply": "2024-12-04T22:03:31.828149Z"
    },
    "id": "PxEGlFhaXNHV",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.014104,
     "end_time": "2024-12-04T22:03:31.830636",
     "exception": false,
     "start_time": "2024-12-04T22:03:31.816532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define a function to create the baseline model\n",
    "def create_baseline():\n",
    "\n",
    "    # Instantiate the sequential model and add the VGG16 model:\n",
    "    model_vgg = Sequential(name=model_name+\"_VGG\")\n",
    "    model_vgg.add(vgg16)\n",
    "\n",
    "    # Add the custom layers atop the VGG19 model:\n",
    "    model_vgg.add(Flatten(name='flattened'))                                    # Flattens the input without affecting the batch size\n",
    "    model_vgg.add(Dropout(0.5, name='dropout1'))                                # Apply dropout to prevent overfitting\n",
    "    model_vgg.add(Dense(256, activation='relu'))                                # Add a fully connected layer with ReLU activation\n",
    "    model_vgg.add(Dropout(0.2, name='dropout2'))                                # Apply another dropout\n",
    "    model_vgg.add(Dense(no_classes, activation='softmax', name='predictions'))  # Add the output layer with softmax activation\n",
    "\n",
    "    return model_vgg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9312903b",
   "metadata": {
    "_cell_guid": "13954fa1-a870-4c42-929c-a45a2d9b810a",
    "_uuid": "37a9ebdc-de66-464d-a8d2-74eda4c39827",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:31.845530Z",
     "iopub.status.busy": "2024-12-04T22:03:31.844904Z",
     "iopub.status.idle": "2024-12-04T22:03:31.856448Z",
     "shell.execute_reply": "2024-12-04T22:03:31.855628Z"
    },
    "id": "SlHD418IX-2S",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.020922,
     "end_time": "2024-12-04T22:03:31.858311",
     "exception": false,
     "start_time": "2024-12-04T22:03:31.837389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the VGG16-based model\n",
    "model_vgg = create_baseline()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "36322c32",
   "metadata": {
    "_cell_guid": "35aa65c2-0a91-4d5a-9299-e890903f862e",
    "_uuid": "7fb9a4ad-5d47-4bd0-b3b9-10b61032a61d",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:31.873001Z",
     "iopub.status.busy": "2024-12-04T22:03:31.872504Z",
     "iopub.status.idle": "2024-12-04T22:03:31.889015Z",
     "shell.execute_reply": "2024-12-04T22:03:31.888286Z"
    },
    "id": "WSorJwLRMwN_",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "a95ee466-4e1a-4a02-a247-108d691ad4f7",
    "papermill": {
     "duration": 0.025657,
     "end_time": "2024-12-04T22:03:31.890606",
     "exception": false,
     "start_time": "2024-12-04T22:03:31.864949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"Yoga-Pose-Classification_VGG\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"Yoga-Pose-Classification_VGG\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ vgg16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ ?                      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flattened (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)              │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)              │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ predictions (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)             │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ vgg16 (\u001b[38;5;33mFunctional\u001b[0m)              │ ?                      │    \u001b[38;5;34m14,714,688\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flattened (\u001b[38;5;33mFlatten\u001b[0m)             │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout1 (\u001b[38;5;33mDropout\u001b[0m)              │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout2 (\u001b[38;5;33mDropout\u001b[0m)              │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ predictions (\u001b[38;5;33mDense\u001b[0m)             │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display a summary of the model architecture\n",
    "model_vgg.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "35185d83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:31.906305Z",
     "iopub.status.busy": "2024-12-04T22:03:31.905655Z",
     "iopub.status.idle": "2024-12-04T22:03:31.909577Z",
     "shell.execute_reply": "2024-12-04T22:03:31.908919Z"
    },
    "papermill": {
     "duration": 0.013061,
     "end_time": "2024-12-04T22:03:31.910972",
     "exception": false,
     "start_time": "2024-12-04T22:03:31.897911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_vgg.build()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3eeb26b3",
   "metadata": {
    "_cell_guid": "e9c6e3d5-c91d-4961-9c8b-b9f290ace771",
    "_uuid": "98fbbdfc-2f26-4655-8b31-5acd08498d48",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:31.926094Z",
     "iopub.status.busy": "2024-12-04T22:03:31.925882Z",
     "iopub.status.idle": "2024-12-04T22:03:32.130606Z",
     "shell.execute_reply": "2024-12-04T22:03:32.129755Z"
    },
    "id": "koXHNi8IN3rL",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "ea65eaa3-0927-46f4-c9a2-9f926e844f72",
    "papermill": {
     "duration": 0.214015,
     "end_time": "2024-12-04T22:03:32.132209",
     "exception": false,
     "start_time": "2024-12-04T22:03:31.918194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot the model architecture and save it to an image file\n",
    "plot_model(model_vgg)\n",
    "# Plot the model architecture and save it to an image file\n",
    "# plot_model(model_vgg, to_file=image_path(model_name+\"_vgg.png\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b14fd2e0",
   "metadata": {
    "_cell_guid": "dd29b61d-ecff-4629-829c-56efee4bfa5f",
    "_uuid": "c36658ae-ab08-4feb-9192-6a0fc50e474d",
    "collapsed": false,
    "id": "pdJVrCd3SMfV",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.007679,
     "end_time": "2024-12-04T22:03:32.148067",
     "exception": false,
     "start_time": "2024-12-04T22:03:32.140388",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 4: Compile Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "18cf80af",
   "metadata": {
    "_cell_guid": "b38b9534-69ee-4d8f-b9e9-b12f3f89b485",
    "_uuid": "3cc7c564-3816-444b-9b75-a2a14caea1d5",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:32.164445Z",
     "iopub.status.busy": "2024-12-04T22:03:32.164175Z",
     "iopub.status.idle": "2024-12-04T22:03:32.176667Z",
     "shell.execute_reply": "2024-12-04T22:03:32.175837Z"
    },
    "id": "I5lcuvvpF1rA",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.022554,
     "end_time": "2024-12-04T22:03:32.178267",
     "exception": false,
     "start_time": "2024-12-04T22:03:32.155713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model with specified loss function, optimizer, and metrics\n",
    "model_vgg.compile(\n",
    "    loss='categorical_crossentropy',# Categorical cross-entropy loss for multi-class classification\n",
    "    optimizer=Adam(0.001),          # Adam optimizer with a learning rate of 0.001\n",
    "    metrics=[\"accuracy\"]            # Monitor the accuracy metric during training\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d4b2196",
   "metadata": {
    "_cell_guid": "0c1a7070-0187-4018-a427-11eb4fe9b784",
    "_uuid": "413c8dbe-5488-4bb8-be05-ee2b2ee1948a",
    "collapsed": false,
    "id": "pCTEwFVVbATV",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.007559,
     "end_time": "2024-12-04T22:03:32.193454",
     "exception": false,
     "start_time": "2024-12-04T22:03:32.185895",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 5: Define Callbacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "edb18c80",
   "metadata": {
    "_cell_guid": "d8a4306b-1c8d-41d7-b944-6156525dfe19",
    "_uuid": "19a0d497-3424-4d59-8624-5e12b8ba41a8",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:32.210255Z",
     "iopub.status.busy": "2024-12-04T22:03:32.209582Z",
     "iopub.status.idle": "2024-12-04T22:03:32.213878Z",
     "shell.execute_reply": "2024-12-04T22:03:32.213044Z"
    },
    "id": "Plrn7snkJeU2",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.0144,
     "end_time": "2024-12-04T22:03:32.215597",
     "exception": false,
     "start_time": "2024-12-04T22:03:32.201197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a ReduceLROnPlateau callback with the following parameters:\n",
    "# This callback monitors the validation accuracy and adjusts the learning rate when the validation accuracy plateaus\n",
    "lr_reduction = ReduceLROnPlateau(monitor='val_accuracy',    # Monitors the validation accuracy to decide when to reduce the learning rate.\n",
    "                                            patience=3,     # Number of epochs with no improvement after which learning rate will be reduced\n",
    "                                            verbose=1,      # Verbosity level. 1 for updating messages, 0 for silence.\n",
    "                                            factor=0.5,     # Learning rate will be reduced to half. New_lr = lr * factor\n",
    "                                            min_lr=0.00001  # Lower bound on the learning rate. It won't reduce the learning rate below this value\n",
    "                                 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8fe01bf3",
   "metadata": {
    "_cell_guid": "ef612301-bd26-42ae-bb5d-bf35be89f161",
    "_uuid": "11e67e28-f40a-467b-8443-94c0d5cfdc29",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:32.232099Z",
     "iopub.status.busy": "2024-12-04T22:03:32.231856Z",
     "iopub.status.idle": "2024-12-04T22:03:32.235326Z",
     "shell.execute_reply": "2024-12-04T22:03:32.234493Z"
    },
    "id": "H8NB7wCYJmht",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.013592,
     "end_time": "2024-12-04T22:03:32.237080",
     "exception": false,
     "start_time": "2024-12-04T22:03:32.223488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Store the ReduceLROnPlateau callback in a list. This list can be passed to a training session.\n",
    "cbs = [lr_reduction]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ea40f0b",
   "metadata": {
    "_cell_guid": "2c189bff-e828-437a-a841-3656c7b9b0cc",
    "_uuid": "a46236ae-966f-4300-89dc-1b2dac28801a",
    "collapsed": false,
    "id": "Nr8wQQb7bmkj",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.007788,
     "end_time": "2024-12-04T22:03:32.252852",
     "exception": false,
     "start_time": "2024-12-04T22:03:32.245064",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 6: Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4c68112c",
   "metadata": {
    "_cell_guid": "e962b8d9-5cdb-458f-a114-2ade485a8a35",
    "_uuid": "2b6fe89a-58f5-40c1-9e0b-3ab955821313",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:03:32.269764Z",
     "iopub.status.busy": "2024-12-04T22:03:32.269517Z",
     "iopub.status.idle": "2024-12-04T22:14:47.225028Z",
     "shell.execute_reply": "2024-12-04T22:14:47.224320Z"
    },
    "id": "OdKsF5YMKH_m",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "9e4d9647-0ec5-430b-bbd7-0ca9bb9ef935",
    "papermill": {
     "duration": 674.965908,
     "end_time": "2024-12-04T22:14:47.226749",
     "exception": false,
     "start_time": "2024-12-04T22:03:32.260841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/22\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1733349818.472978      81 service.cc:145] XLA service 0x7d329400ca70 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1733349818.473029      81 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1733349818.473033      81 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m 2/68\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m4s\u001b[0m 63ms/step - accuracy: 0.0312 - loss: 3.2457      "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1733349829.891170      81 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 990ms/step - accuracy: 0.4290 - loss: 2.7696 - val_accuracy: 0.9362 - val_loss: 0.2570 - learning_rate: 0.0010\n",
      "Epoch 2/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 378ms/step - accuracy: 0.8342 - loss: 0.4714 - val_accuracy: 0.9553 - val_loss: 0.1442 - learning_rate: 0.0010\n",
      "Epoch 3/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 374ms/step - accuracy: 0.8833 - loss: 0.3574 - val_accuracy: 0.9574 - val_loss: 0.1347 - learning_rate: 0.0010\n",
      "Epoch 4/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 376ms/step - accuracy: 0.8820 - loss: 0.3316 - val_accuracy: 0.9723 - val_loss: 0.1016 - learning_rate: 0.0010\n",
      "Epoch 5/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 372ms/step - accuracy: 0.9140 - loss: 0.2747 - val_accuracy: 0.9617 - val_loss: 0.1199 - learning_rate: 0.0010\n",
      "Epoch 6/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 376ms/step - accuracy: 0.9291 - loss: 0.2436 - val_accuracy: 0.9574 - val_loss: 0.1557 - learning_rate: 0.0010\n",
      "Epoch 7/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 264ms/step - accuracy: 0.9287 - loss: 0.1937\n",
      "Epoch 7: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 379ms/step - accuracy: 0.9287 - loss: 0.1938 - val_accuracy: 0.9553 - val_loss: 0.1189 - learning_rate: 0.0010\n",
      "Epoch 8/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 372ms/step - accuracy: 0.9408 - loss: 0.1631 - val_accuracy: 0.9638 - val_loss: 0.1128 - learning_rate: 5.0000e-04\n",
      "Epoch 9/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 371ms/step - accuracy: 0.9765 - loss: 0.1036 - val_accuracy: 0.9660 - val_loss: 0.0909 - learning_rate: 5.0000e-04\n",
      "Epoch 10/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 261ms/step - accuracy: 0.9709 - loss: 0.1020\n",
      "Epoch 10: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 378ms/step - accuracy: 0.9709 - loss: 0.1022 - val_accuracy: 0.9660 - val_loss: 0.1036 - learning_rate: 5.0000e-04\n",
      "Epoch 11/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 373ms/step - accuracy: 0.9822 - loss: 0.0663 - val_accuracy: 0.9660 - val_loss: 0.0932 - learning_rate: 2.5000e-04\n",
      "Epoch 12/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 376ms/step - accuracy: 0.9726 - loss: 0.0966 - val_accuracy: 0.9723 - val_loss: 0.0911 - learning_rate: 2.5000e-04\n",
      "Epoch 13/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 270ms/step - accuracy: 0.9783 - loss: 0.0868\n",
      "Epoch 13: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 386ms/step - accuracy: 0.9783 - loss: 0.0870 - val_accuracy: 0.9681 - val_loss: 0.0883 - learning_rate: 2.5000e-04\n",
      "Epoch 14/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 378ms/step - accuracy: 0.9741 - loss: 0.0889 - val_accuracy: 0.9681 - val_loss: 0.0888 - learning_rate: 1.2500e-04\n",
      "Epoch 15/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 372ms/step - accuracy: 0.9783 - loss: 0.0707 - val_accuracy: 0.9660 - val_loss: 0.0863 - learning_rate: 1.2500e-04\n",
      "Epoch 16/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 254ms/step - accuracy: 0.9759 - loss: 0.0733\n",
      "Epoch 16: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 369ms/step - accuracy: 0.9759 - loss: 0.0733 - val_accuracy: 0.9681 - val_loss: 0.0900 - learning_rate: 1.2500e-04\n",
      "Epoch 17/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 366ms/step - accuracy: 0.9817 - loss: 0.0640 - val_accuracy: 0.9681 - val_loss: 0.0852 - learning_rate: 6.2500e-05\n",
      "Epoch 18/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 371ms/step - accuracy: 0.9794 - loss: 0.0614 - val_accuracy: 0.9660 - val_loss: 0.0870 - learning_rate: 6.2500e-05\n",
      "Epoch 19/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 268ms/step - accuracy: 0.9938 - loss: 0.0411\n",
      "Epoch 19: ReduceLROnPlateau reducing learning rate to 3.125000148429535e-05.\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 383ms/step - accuracy: 0.9937 - loss: 0.0413 - val_accuracy: 0.9660 - val_loss: 0.0860 - learning_rate: 6.2500e-05\n",
      "Epoch 20/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 378ms/step - accuracy: 0.9805 - loss: 0.0676 - val_accuracy: 0.9638 - val_loss: 0.0843 - learning_rate: 3.1250e-05\n",
      "Epoch 21/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 373ms/step - accuracy: 0.9792 - loss: 0.0708 - val_accuracy: 0.9681 - val_loss: 0.0853 - learning_rate: 3.1250e-05\n",
      "Epoch 22/22\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 257ms/step - accuracy: 0.9870 - loss: 0.0533\n",
      "Epoch 22: ReduceLROnPlateau reducing learning rate to 1.5625000742147677e-05.\n",
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 383ms/step - accuracy: 0.9870 - loss: 0.0533 - val_accuracy: 0.9681 - val_loss: 0.0868 - learning_rate: 3.1250e-05\n"
     ]
    }
   ],
   "source": [
    "history = model_vgg.fit(train_generator,\n",
    "                    validation_data=validation_generator,\n",
    "                    epochs=EPOCHS,\n",
    "                    batch_size=batch_size,\n",
    "                    callbacks=cbs,\n",
    "                    shuffle=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bea7d26",
   "metadata": {
    "_cell_guid": "0343a7b6-4ac8-44d0-827b-2701deef45f4",
    "_uuid": "01c15f69-b932-4c2c-a0f8-7495c7e10945",
    "collapsed": false,
    "id": "Lg7Wfedylmek",
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.077567,
     "end_time": "2024-12-04T22:14:47.382310",
     "exception": false,
     "start_time": "2024-12-04T22:14:47.304743",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Step 7: Evaluate: Plot the Graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fbdc0484",
   "metadata": {
    "_cell_guid": "7000234e-53d0-49ef-9a6c-78168ed2a97c",
    "_uuid": "a26e5b97-385d-47b8-8c6f-ae6458772a03",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:14:47.537533Z",
     "iopub.status.busy": "2024-12-04T22:14:47.536964Z",
     "iopub.status.idle": "2024-12-04T22:14:48.227504Z",
     "shell.execute_reply": "2024-12-04T22:14:48.226789Z"
    },
    "id": "tjy97sov1MzI",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "522e26b5-fe83-497c-9b39-c57a688c4cb3",
    "papermill": {
     "duration": 0.770672,
     "end_time": "2024-12-04T22:14:48.229693",
     "exception": false,
     "start_time": "2024-12-04T22:14:47.459021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metric(history)\n",
    "# Save the model to a file\n",
    "# model_vgg.save(model_path(model_name+'_vgg16.h5'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8798ac80",
   "metadata": {
    "_cell_guid": "4095c458-5aa6-49fe-bf79-96a73f7e1747",
    "_uuid": "9e5f2b99-87dc-4a00-9898-4fb92727f876",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-12-04T22:14:48.388780Z",
     "iopub.status.busy": "2024-12-04T22:14:48.388474Z",
     "iopub.status.idle": "2024-12-04T22:15:17.602539Z",
     "shell.execute_reply": "2024-12-04T22:15:17.601617Z"
    },
    "id": "91Lij3fOjuzA",
    "jupyter": {
     "outputs_hidden": false
    },
    "outputId": "68bf7a51-d625-4349-d567-f0b9fce63199",
    "papermill": {
     "duration": 29.293937,
     "end_time": "2024-12-04T22:15:17.604032",
     "exception": false,
     "start_time": "2024-12-04T22:14:48.310095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 284ms/step - accuracy: 0.9913 - loss: 0.0377\n",
      "\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 498ms/step - accuracy: 0.9720 - loss: 0.0851\n",
      "Final Train Accuracy: 99.54%\n",
      "Final Validation Accuracy: 96.81%\n"
     ]
    }
   ],
   "source": [
    "train_loss, train_acc = model_vgg.evaluate(train_generator)\n",
    "test_loss, test_acc   = model_vgg.evaluate(validation_generator)\n",
    "\n",
    "print(f\"Final Train Accuracy: {train_acc * 100:.2f}%\")\n",
    "print(f\"Final Validation Accuracy: {test_acc * 100:.2f}%\")"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [
    "HPmPWQFeW6T-"
   ],
   "gpuType": "T4",
   "provenance": []
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 920599,
     "sourceId": 1559111,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30804,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 728.855955,
   "end_time": "2024-12-04T22:15:20.115001",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-04T22:03:11.259046",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
